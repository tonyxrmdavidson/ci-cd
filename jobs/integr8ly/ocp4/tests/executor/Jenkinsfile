#!groovy
String clusterAPI = "https://api.${CLUSTER_NAME}.${CLUSTER_DOMAIN}"
String webappUrl = "https://tutorial-web-app-${NAMESPACE_PREFIX}solution-explorer.apps.${CLUSTER_NAME}.${CLUSTER_DOMAIN}"
jobParams = [
    string(name: 'REPOSITORY', value: "${REPOSITORY}"),
    string(name: 'BRANCH', value: "${BRANCH}"),
    string(name: 'CLUSTER_URL', value: clusterAPI),
    string(name: 'ADMIN_USERNAME', value: "${ADMIN_USERNAME}"),
    string(name: 'ADMIN_PASSWORD', value: "${ADMIN_PASSWORD}"),
    string(name: 'CUSTOMER_ADMIN_PASSWORD', value: "${CUSTOMER_ADMIN_PASSWORD}"),
    string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
    string(name: 'TIMEOUT_THRESHOLD', value: "${TIMEOUT_THRESHOLD}"),
    string(name: 'WEBAPP_URL', value: webappUrl),
    booleanParam(name: 'CLEAN_RESOURCES', value: Boolean.valueOf("${CLEAN_RESOURCES}"))
]
def err = null
def wtTestStatus;
String adminPassword = params.ADMIN_PASSWORD
String tempAdmin = "test-user" // used as a temporary admin for customer-admin permissions test and for browser tests
try {
    timeout(120) { ansiColor('xterm') { timestamps {
        node('tester') {

            stage ("Dedicated admin permissions") {
                sh "oc login ${clusterAPI}:6443 --insecure-skip-tls-verify=true -u ${tempAdmin} -p ${CUSTOMER_ADMIN_PASSWORD}"

                sleep time: 3, unit: 'SECONDS'

                sh "oc login ${clusterAPI}:6443 --insecure-skip-tls-verify=true -u ${ADMIN_USERNAME} -p ${ADMIN_PASSWORD}"
                sh "oc adm groups add-users dedicated-admins ${tempAdmin}"

                sh "oc login ${clusterAPI}:6443 --insecure-skip-tls-verify=true -u ${CUSTOMER_ADMIN_USERNAME} -p ${CUSTOMER_ADMIN_PASSWORD}"
                // sleep is required to properly 'enable' new htpasswd usrs by the operator.
                sleep time: 2, unit: 'MINUTES'
                
                parameters = jobParams

                parameters.add(booleanParam(name: 'IS_DEDICATED_ADMIN', value: true))

                adminParams = parameters

                parameters.add(string(name: 'CUSTOMER_ADMIN_USERNAME', value: "${CUSTOMER_ADMIN_USERNAME}"))

                runTest('customer-admin-permissions-test', parameters)

                adminParams.add(string(name: 'CUSTOMER_ADMIN_USERNAME', value: tempAdmin))
                runTest('customer-admin-permissions-test', adminParams)

                println "removing ${tempAdmin} from the dedicated admins group"
                sh "oc login ${clusterAPI}:6443 --insecure-skip-tls-verify=true -u ${ADMIN_USERNAME} -p ${ADMIN_PASSWORD}"
                sh "oc adm groups remove-users dedicated-admins ${tempAdmin}"

                // some time is needed for the test-user removal from dedicated-admins group propagation, hence the sleep time
                sleep time: 2, unit: 'MINUTES'

                nonAdminParams = jobParams
                nonAdminParams.add(booleanParam(name: 'IS_DEDICATED_ADMIN', value: false))
                nonAdminParams.add(string(name: 'CUSTOMER_ADMIN_USERNAME', value: tempAdmin))

                runTest('customer-admin-permissions-test', nonAdminParams)
            } // stage

            stage ('Browser tests') {
                jobParams.add(string(name: 'EVALS_USERNAME', value: tempAdmin))
                String[] testsToRun = ["tests/00_walkthroughs_start/start-walkthroughs.js", 
                                       "tests/10_fuse/fuse-console-login.js", 
                                       "tests/50_enmasse/enmasse-console-login.js",
                                       "tests/80_walkthrough_wt1a/wt1a-walkthrough.js"]

                for (i = 0; i < testsToRun.size(); i++) {
                    parameters = jobParams
                    parameters.add(string(name: 'TEST_TO_RUN', value: testsToRun[i]))
                    runTest('browser-based-single-test', parameters)
                }
            } // stage

            stage ('WT1 backend tests') {
                runTest('w1-test-executor', jobParams)
            } // stage

            stage ('Alerts test') {
                runTest('alerts-test', jobParams)
            } // stage

        } // node
    }}} // timeout, ansiColor, timestamps
} catch (caughtError){
    currentBuild.result = 'FAILURE'
}

def runTest(testPipeline, parameters) {
    buildStatus = build(job: testPipeline, propagate: false, parameters: parameters).result
    println "Build finished with ${buildStatus}"
                    
    if (buildStatus != 'SUCCESS') {
        currentBuild.result = 'UNSTABLE'
    }
}