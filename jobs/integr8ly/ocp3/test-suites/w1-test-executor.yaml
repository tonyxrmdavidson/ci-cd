---

- job:
    name: w1-test-executor
    project-type: pipeline
    sandbox: false
    parameters:
      - string:
          name: REPOSITORY
          default: 'file:///Users/tonydavidson/integreatly-qe/'
          description: 'QE repository containing the smoke tests source code.'
      - string:
          name: BRANCH
          default: 'master'
          description: 'Branch of the repository'
      - string:
          name: CLUSTER_URL
          description: 'URL of cluster on which the W1 test will be executed.'
      - string:
          name: NAMESPACE_PREFIX
          description: "Value used to prefix the names of the namespaces created during Integr8ly installation"
      - string: 
          name: ADMIN_USERNAME
          default: 'admin@example.com'
          description: 'Admin user name to login to Integreatly cluster.'
      - string: 
          name: ADMIN_PASSWORD
          default: 'Password1'
          description: 'Admin password to login to Integreatly cluster.'
      - string:
          name: EVALS_USERNAME
          default: 'evals11@example.com'
          description: 'Evals user name'
      - bool:
          name: CLEAN_RESOURCES
          default: true
          description: 'depending on whether the resources should be cleaned after the successful execution'
      - string:
          name: TIMEOUT_THRESHOLD
          default: '1'
          description: 'optionally increase timeout values. If you provide value 2 it means it will be sleeping/waiting two times longer'
      - string:
          name: POLARION_TEMPLATE_ID
          description: 'Optional: the Polarion test run template id to use to report the test result to Polarion'
      - bool:
          name: W1_FINAL_VERIFICATION
          default: true
          description: 'Expects existing AMQ Online address. When it is set to true then it verifies last step of fuse test (sending data (order) from one REST app to another) in W1. This defaults to false.'
      - bool:
          name: FINAL_CHECK_ONLY
          default: false
          description: 'defaults to false. When set to true - this entire test is skipped and only final part of fuse wt1 test is executed'
    dsl: |
        def err = null
        try {
            timeout(20) { 
                ansiColor('xterm') { 
                    timestamps {
                        node('tester') {        
                            stage('Verify input') {
                                if (!CLUSTER_URL) {
                                    throw new hudson.AbortException('CLUSTER_URL parameter is required!')
                                } // if
                            } // stage

                            stage('Run create AMQ Online address test') {
                                buildStatus = build(job: 'amq-online-address-creation-test', propagate: false, parameters: [
                                    string(name: 'REPOSITORY', value: "${REPOSITORY}"),
                                    string(name: 'BRANCH', value: "${BRANCH}"),
                                    string(name: 'CLUSTER_URL', value: "${CLUSTER_URL}"),
                                    string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
                                    string(name: 'ADMIN_USERNAME', value: "${ADMIN_USERNAME}"),
                                    string(name: 'ADMIN_PASSWORD', value: "${ADMIN_PASSWORD}"),
                                    string(name: 'EVALS_USERNAME', value: "${EVALS_USERNAME}"),
                                    string(name: 'TIMEOUT_THRESHOLD', value: "${TIMEOUT_THRESHOLD}"),
                                    string(name: 'POLARION_TEMPLATE_ID', value: "${POLARION_TEMPLATE_ID}"),
                                    booleanParam(name: 'CLEAN_RESOURCES', value: Boolean.valueOf("false")),
                                    booleanParam(name: 'FINAL_CHECK_ONLY', value: Boolean.valueOf("${FINAL_CHECK_ONLY}"))
                                ]).result;

                                println "Build finished with ${buildStatus}"
                                if (buildStatus != 'SUCCESS') {
                                    currentBuild.result = 'UNSTABLE'
                                }
                            }

                            stage('Run Fuse integration test') {
                                buildStatus = build(job: 'fuse-tests', propagate: false, parameters: [
                                    string(name: 'REPOSITORY', value: "${REPOSITORY}"),
                                    string(name: 'BRANCH', value: "${BRANCH}"),
                                    string(name: 'CLUSTER_URL', value: "${CLUSTER_URL}"),
                                    string(name: 'NAMESPACE_PREFIX', value: "${NAMESPACE_PREFIX}"),
                                    string(name: 'ADMIN_USERNAME', value: "${ADMIN_USERNAME}"),
                                    string(name: 'ADMIN_PASSWORD', value: "${ADMIN_PASSWORD}"),
                                    string(name: 'EVALS_USERNAME', value: "${EVALS_USERNAME}"),
                                    string(name: 'TIMEOUT_THRESHOLD', value: "${TIMEOUT_THRESHOLD}"),
                                    string(name: 'POLARION_TEMPLATE_ID', value: "${POLARION_TEMPLATE_ID}"),
                                    booleanParam(name: 'CLEAN_RESOURCES', value: Boolean.valueOf("${CLEAN_RESOURCES}")),
                                    booleanParam(name: 'W1_FINAL_VERIFICATION', value: Boolean.valueOf("${W1_FINAL_VERIFICATION}")),
                                    booleanParam(name: 'FINAL_CHECK_ONLY', value: Boolean.valueOf("${FINAL_CHECK_ONLY}"))
                                ]).result;

                                println "Build finished with ${buildStatus}"
                                if (buildStatus != 'SUCCESS') {
                                    currentBuild.result = 'UNSTABLE'
                                }
                            } // stage end
                        } // node end
                    }
                }  
            } // timeout end
        } catch (caughtError){
            currentBuild.result = 'FAILURE'
            err = caughtError 
        }
