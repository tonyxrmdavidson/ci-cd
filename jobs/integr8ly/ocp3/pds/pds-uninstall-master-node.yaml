---

- job:
    name: pds-uninstall-master-node
    project-type: pipeline
    description: "Uninstalls Integreatly using master node as Jenkins slave and executing Ansible uninstallation playbook there."
    sandbox: false
    concurrent: true
    parameters:
        - string:
            name: REPOSITORY
            default: https://github.com/integr8ly/installation.git
            description: "Repository of the Integreatly installer"
        - string:
            name: BRANCH
            default: 'master'
            description: "Branch of the installer repository"
        - string:
            name: YOURCITY
            description: "City or Customer (5 char min.) plus the generated hash, e.g. qebrno-5d10 [required]"    
        - string:
            name: CLUSTER_DOMAIN
            default: 'open.redhat.com'
            description: "Cluster domain - could be open.redhat.com or example.opentlc.com"
        - string:
            name: SSH_USER
            default: ec2-user
            description: "User capable of SSH-ing to cluster nodes"
        - string:
            name: PRIVATE_KEY_ID
            default: pds-bastion-pem
            description: "ID of SSH Credentials (private key) used for SSH-ing to the cluster nodes"
        - string:
            name: NAMESPACE_PREFIX
            description: "This value will be used to define the prefix of the names of the namespaces deleted during uninstallation. Defaulting to empty string for RHPDS."
        - string:
            name: ADDITIONAL_ANSIBLE_PARAMS
            default: '-e amq_streams=true'
            description: "Additional parameters passed to uninstall playbook, e.g.'-e eval_seed_users_count=0'. Can be left empty"
    dsl: |
        import hudson.model.*
        import jenkins.model.*
        import hudson.slaves.*
        import hudson.slaves.EnvironmentVariablesNodeProperty.Entry

        import hudson.plugins.sshslaves.verifiers.*

        String MASTER_URL = "master.${YOURCITY}.${CLUSTER_DOMAIN}"    
        String masterLabel = "${MASTER_URL}-slave"
        String BASTION_URL = "bastion.${YOURCITY}.${CLUSTER_DOMAIN}"    
        String bastionLabel = "${BASTION_URL}-slave"  
        String secretFileName = "QE-AWS-SECRET.yml"

        try {
            timeout(60) { ansiColor('xterm') { timestamps {
                node('tester') {        
                    stage('Verify input') {
                        if (!YOURCITY) {
                            throw new hudson.AbortException('YOURCITY parameter is required!')
                        }
                    }
                    String description = "domain name: ${CLUSTER_DOMAIN}<br>uninstall branch: ${BRANCH}"
                    if (currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')['userId']){
                        description += "<br>triggered by: " + currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')['userId']
                    }
                    currentBuild.displayName = "${currentBuild.displayName} ${YOURCITY}"
                    currentBuild.description = description

                    stage('Configure bastion as jenkins slave') {
                        if (Jenkins.instance.getNode(bastionLabel)) {
                            println "Slave '${bastionLabel} already exists, skipping its creation."
                        } else {
                            createAgent(bastionLabel, BASTION_URL)
                        } // end if
                    } // stage
                } // node

                node (bastionLabel) {
                    stage('Install JDK on master node') {
                        // Java is not installed on master node by default and is required to create an agent in Jenkins
                        String masterNode = "master1.${YOURCITY}.internal"
                        sh(
                            returnStdout: false,
                            script: """
                                sudo ansible all -i "${masterNode}," -m shell -a "yum install java-1.8.0-openjdk-devel -y" --become
                            """
                        )
                    } // stage
                    if (Jenkins.instance.getNode(masterLabel)) {
                        println "Slave '${masterLabel} already exists, skipping its creation."
                    } else {
                        createAgent(masterLabel, MASTER_URL)
                    } // end if
                }

                node (masterLabel) {
                    stage ('Remove bastion slave') {
                        removeAgent(bastionLabel)
                    }
                    stage('Clone the installer') {
                        dir('installation') {
                            checkout([
                                $class: 'GitSCM',
                                branches: [[name: BRANCH]],
                                doGenerateSubmoduleConfigurations: false,
                                extensions: [],
                                userRemoteConfigs: [[url: REPOSITORY]]
                            ])
                            sh "git clean -xdf"
                        } // dir
                    } // stage
                    
                    stage('Execute playbook') {
                        dir('installation') {
                            sh """
                                sudo oc login -u system:admin
                                sudo ansible-playbook -i inventories/pds.template ./playbooks/uninstall.yml -e ns_prefix=${NAMESPACE_PREFIX} ${ADDITIONAL_ANSIBLE_PARAMS}
                            """
                        } // dir
                    } // stage
                } // node

            }}} // timeout, ansiColor, timestamps
            
        } finally {
            // Clean up - remove jenkins slave that was created
            removeAgent(masterLabel)
        }

        def createAgent(label, url) {
            ComputerLauncher launcher = new hudson.plugins.sshslaves.SSHLauncher(
                "${url}", // Host
                22, // Port
                "${PRIVATE_KEY_ID}", // Credentials
                (String)null, // JVM Options
                (String)null, // JavaPath
                (hudson.tools.JDKInstaller)null, //jdkInstaller
                (String)null, // Prefix Start Slave Command
                (String)null, // Suffix Start Slave Command
                (Integer)null, // Launch Timeout in Seconds
                (Integer)null, // Maximum Number of Retries
                (Integer)null, // The number of seconds to wait between retries
                new NonVerifyingKeyVerificationStrategy() // Host Key Verification Strategy
            )
            
            // Define a "Permanent Agent"
            Slave agent = new DumbSlave(
                    label,
                    "/home/${SSH_USER}",
                    launcher)
            agent.nodeDescription = "${label} for ${JOB_NAME}"
            agent.numExecutors = 3
            agent.labelString = label
            agent.mode = Node.Mode.EXCLUSIVE
            agent.retentionStrategy = new RetentionStrategy.Always()

            // Create a "Permanent Agent"
            Jenkins.instance.addNode(agent)
            
            println "Slave ${label} has been created successfully."
        }

        def removeAgent(label) {
            Node slave = Jenkins.instance.getNode(label);
            if(slave != null) {
                Boolean isIdle = slave.toComputer().isIdle();
                if(isIdle) {
                    Jenkins.instance.removeNode(slave);
                }
            }
        }
